git사용법

add는 스테이지(앞으로 깃에 올라갈애들이 대기하는 곳)에 올리는 것이고 (깃이 기억할 상태를 조성?하는것)
commit 은 깃에게 이상태를 기억해! 하는것이다
push 는 기억한 상태를 온라인에도 동기화시키는 것이다


project 를 사용하여 주요 개념을 정리가능
git fork
- Fork란?
Fork는 다른 사용자의 원본 저장소를 내 계정으로 복사하는 것을 의미. 
이는 원본 프로젝트에 영향을 주지 않고, 복사한 저장소에서 자유롭게 수정할 수 있다. 
fork한 저장소는 원본(다른 사람의 github repository)와 연결되어 있다.


1. 배열(Array)
가장 기본적인 자료구조.
메모리 상에 연속적으로 저장돼서 인덱스로 접근
장점: 인덱스로 바로 접근 가능 (빠름)
단점: 크기가 고정돼 있고, 중간에 뭔가 끼워 넣으면 느림

2. 리스트(List)
배열이랑 비슷한데, 좀 더 유연함.
연결 리스트(Linked List)
줄줄이 사탕처럼 연결된 구조
장점: 삽입/삭제가 쉬움
단점: 인덱스로 바로 접근 못 함 (하나하나 따라가야 함)-hard

3. 스택(Stack)-FILO
push: 넣기
pop: 꺼내기

활용: 웹 브라우저 뒤로 가기

4. 큐(Queue)-FIFO
놀이공원 줄 서는 거
enqueue: 넣기
dequeue: 꺼내기

활용: 프린터 대기열, BFS 알고리즘
 * BFS - 두 노드 사이의 최단 경로 혹은 임의의 경로를 찾고 싶을 때

5. 힙(Heap)
우선순위 큐라고도 불리고, 가장 중요한 걸 빨리 꺼낼 수 있게 만든 구조
최댓값이나 최솟값을 빨리 찾을 때 사용
자식 노드보다 부모 노드가 항상 크거나(최대 힙), 작거나(최소 힙)

6. 트리(Tree)
계층 구조를 표현할 때 씀
대표적인 게 이진 트리. 부모 하나에 자식 둘.

이진 탐색 트리(BST): 왼쪽은 작고, 오른쪽은 큰 규칙
검색, 삽입, 삭제 효율적

7. 그래프(Graph)
정점(노드)과 간선(연결)으로 구성된 복잡한 구조
SNS 친구 관계, 길 찾기 등 연결된 모든 구조를 표현 가능.
방향 그래프 / 무방향 그래프

DFS, BFS 같은 탐색 알고리즘 사용

8. 해시 테이블(Hash Table)
키-값 쌍으로 저장해서 빠르게 찾는 구조
전화번호부처럼 이름으로 번호 찾는 거랑 비슷.

장점: 거의 O(1) 속도로 검색 가능
단점: 충돌(다른 키가 같은 해시값을 가질 때) 처리 필요
